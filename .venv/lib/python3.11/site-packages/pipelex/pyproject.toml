[project]
name = "pipelex"
version = "0.14.3"
description = "The open standard for repeatable AI workflows. Write business logic, not API calls."
authors = [{ name = "Evotis S.A.S.", email = "oss@pipelex.com" }]
maintainers = [{ name = "Pipelex staff", email = "oss@pipelex.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10,<3.14"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]

dependencies = [
    "aiofiles>=23.2.1",
    "backports.strenum>=1.3.0 ; python_version < '3.11'",
    "filetype>=1.2.0",
    "httpx>=0.23.0,<1.0.0",
    "instructor>=1.8.3,<1.11.0",                          # 1.11.x causes typing errors with mypy
    "jinja2>=3.1.4",
    "json2html>=1.3.0",
    "kajson==0.3.1",
    "markdown>=3.6",
    "networkx>=3.4.2",
    "openai>=1.60.1",
    "pillow>=11.2.1",
    "polyfactory>=2.21.0",
    "posthog>=6.7.0",
    "pypdfium2>=4.30.0,!=4.30.1",
    "pydantic>=2.10.6,<3.0.0",
    "python-dotenv>=1.0.1",
    "PyYAML>=6.0.2",
    "rich>=13.8.1",
    "shortuuid>=1.0.13",
    "tomli>=2.3.0",
    "tomlkit>=0.13.2",
    "typer>=0.16.0",
    "typing-extensions>=4.13.2",
    "yattag>=1.15.2",
]

[project.urls]
Homepage = "https://pipelex.com"
Repository = "https://github.com/Pipelex/pipelex"
Documentation = "https://docs.pipelex.com/"
Changelog = "https://docs.pipelex.com/changelog/"

[project.optional-dependencies]
anthropic = ["anthropic>=0.60.0"]
bedrock = ["boto3>=1.34.131", "aioboto3>=13.4.0"]
fal = ["fal-client>=0.4.1"]
google = ["google-auth-oauthlib>=1.2.1"]
google-genai = ["google-genai", "instructor[google-genai]"]
mistralai = ["mistralai==1.5.2"]
docs = [
    "mkdocs==1.6.1",
    "mkdocs-glightbox==0.4.0",
    "mkdocs-material==9.6.14",
    "mkdocs-meta-manager==1.1.0",
]

dev = [
    "boto3-stubs>=1.35.24",
    "mypy>=1.11.2",
    "pyright>=1.1.405",
    "pylint>=3.3.8",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "pytest-sugar>=1.0.0",
    "pytest-xdist>= 3.6.1",
    "ruff>=0.6.8",
    "types-aioboto3[bedrock,bedrock-runtime]>=13.4.0",
    "types-aiofiles>=24.1.0.20240626",
    "types-markdown>=3.6.0.20240316",
    "types-networkx>=3.3.0.20241020",
    "types-PyYAML>=6.0.12.20250326",
]

[project.scripts]
pipelex = "pipelex.cli._cli:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
check_untyped_defs = true
exclude = "^.*\\.venv/.*$"
mypy_path = "."
packages = ["pipelex", "tests"]
plugins = ["pydantic.mypy"]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["filetype", "json2html", "pypdfium2", "pypdfium2.raw"]

[tool.pyright]
pythonVersion = "3.11"
include = ["pipelex", "tests"]
exclude = ["**/__pycache__", ".venv", ".git", "build", "dist"]
analyzeUnannotatedFunctions = true
deprecateTypingAliases = false
disableBytesTypePromotions = true
enableExperimentalFeatures = false
enableTypeIgnoreComments = true
extraPaths = ["./tests"]
reportAbstractUsage = "error"
reportArgumentType = "error"
reportAssertAlwaysTrue = "error"
reportAssertTypeFailure = "error"
reportAssignmentType = "error"
reportAttributeAccessIssue = "error"
reportCallInDefaultInitializer = true
reportCallIssue = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportGeneralTypeIssues = "error"
reportImplicitOverride = true
reportImplicitStringConcatenation = false
reportImportCycles = true
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInconsistentOverload = "error"
reportIndexIssue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeArguments = "error"
reportInvalidTypeForm = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingImports = "error"
reportMissingModuleSource = "warning"
reportMissingParameterType = "error"
reportMissingSuperCall = "none"
reportMissingTypeArgument = "error"
reportMissingTypeStubs = false
reportNoOverloadImplementation = "error"
reportOperatorIssue = "error"
reportOptionalCall = "error"
reportOptionalContextManager = "error"
reportOptionalIterable = "error"
reportOptionalMemberAccess = "error"
reportOptionalOperand = "error"
reportOptionalSubscript = "error"
reportOverlappingOverload = "error"
reportPossiblyUnboundVariable = "error"
reportPrivateImportUsage = "error"
reportPrivateUsage = "error"
reportPropertyTypeMismatch = true
reportRedeclaration = "error"
reportReturnType = "error"
reportSelfClsParameterName = "error"
reportTypeCommentUsage = "error"
reportTypedDictNotRequiredAccess = "error"
reportUnboundVariable = "error"
reportUndefinedVariable = "error"
reportUninitializedInstanceVariable = "none"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnnecessaryTypeIgnoreComment = "none"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportUnusedCallResult = "none"
reportUnusedClass = "error"
reportUnusedCoroutine = "error"
reportUnusedExcept = "error"
reportUnusedExpression = "error"
reportUnusedFunction = "error"
reportUnusedImport = "none"
reportUnusedVariable = "error"
reportWildcardImportFromLibrary = "error"
strictDictionaryInference = true
strictListInference = true
strictParameterNoneValue = true
strictSetInference = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib -ra -m 'not (inference or llm or img_gen or extract or needs_output or pipelex_api)'"
asyncio_default_fixture_loop_scope = "session"
filterwarnings = [
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning",
    "ignore:websockets.*is deprecated:DeprecationWarning",
    "ignore:typing\\.io is deprecated:DeprecationWarning",
    "ignore:typing\\.re is deprecated:DeprecationWarning",
    "ignore:.*has been moved to cryptography.*",
    "ignore:Use.*Types instead",
]
markers = [
    "needs_output: tests that need output to be displayed",
    "inference: slow and costly due to inference calls",
    "llm: slow and costly due to llm inference calls",
    "img_gen: slow and costly due to image generation inference calls",
    "extract: slow and costly due to doc extraction inference calls",
    "gha_disabled: tests that should not run in GitHub Actions",
    "codex_disabled: tests that should not run in Codex",
    "dry_runnable: tests that can be run in dry-run mode",
    "pipelex_api: tests that require access to the Pipelex API",
]
minversion = "8.0"
xfail_strict = true

[tool.coverage.run]
source = ["pipelex"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.ruff]
exclude = [
    ".cursor",
    ".git",
    ".github",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "trigger_pipeline",
]
line-length = 150
target-version = "py311"

[tool.ruff.format]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN201",   # Missing return type annotation for public function `my_func`
    "ANN202",   # Missing return type annotation for private function `my_func`
    "ANN204",   # Missing return type annotation for special method `my_func`
    "ANN206",   #  Missing return type annotation for classmethod `my_func`
    "ANN401",   # Dynamically typed expressions (typing.Any) are disallowed in `...`
    "ASYNC230", # Async functions should not open files with blocking methods like `open`

    "C901",   # Is to complex
    "COM812", # Checks for the absence of trailing commas.

    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D205", # 1 blank line required between summary line and description
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood: "My docstring...."
    "D404", # First word of the docstring should not be "This"
    "D415", # First line should end with a period, question mark, or exclamation point

    "DTZ001", # `datetime.datetime()` called without a `tzinfo` argument
    "DTZ005", # `datetime.datetime.now()` called without a `tz` argument

    "ERA001", # Found commented-out code

    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "FBT003", #Boolean positional value in function call

    "FIX002", # Line contains TODO, consider resolving the issue

    "PLC0105", # `TypeVar` name "SomethingType" does not reflect its covariance; consider renaming it to "SomethingType_co"

    "PLR0911", # Too many return statements (/6)
    "PLR0912", # Too many branches (/12)
    "PLR0913", # Too many arguments in function definition (/5)
    "PLR0915", # Too many statements (/50)
    "PLR2004", # Magic value used in comparison, consider replacing `2` with a constant variable

    "PT013", # Incorrect import of `pytest`; use `import pytest` instead

    "PTH100", # `os.path.abspath()` should be replaced by `Path.resolve()`
    "PTH103", # `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    "PTH107", # `os.remove()` should be replaced by `Path.unlink()`
    "PTH109", # `os.getcwd()` should be replaced by `Path.cwd()`
    "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH120", # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH110", # `os.path.exists()` should be replaced by `Path.exists()`
    "PTH112", # `os.path.isdir()` should be replaced by `Path.is_dir()`
    "PTH119", # `os.path.basename()` should be replaced by `Path.name`
    "PTH123", # `open()` should be replaced by `Path.open()`
    "PTH208", # Use `pathlib.Path.iterdir()` instead.

    "PYI051", # `Literal["auto"]` is redundant in a union with `str`

    "RET505", # superfluous-else-return

    "RUF001", # String contains ambiguous `′` (PRIME). Did you mean ``` (GRAVE ACCENT)?
    "RUF003", # Comment contains ambiguous `’` (RIGHT SINGLE QUOTATION MARK). Did you mean ``` (GRAVE ACCENT)?

    "SIM105", # Use `contextlib.suppress(ValueError)` instead of `try`-`except`-`pass`
    "SIM108", # Use ternary operator `description = func.__doc__.strip().split("\n")[0] if func.__doc__ else func.__name__` instead of `if`-`else`-block

    "S101", # Use of `assert` detected
    "S102", # Use of `exec` detected
    "S106", # Possible hardcoded password assigned to argument: "secret"
    "S105", # Possible hardcoded password assigned to: "child_secret"

    "S311", # Cryptographically weak pseudo-random number generator

    "TD002", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003", # Missing issue link for this TODO

    "T201", # `print` found

    # TODO: stop ignoring these rules
    "BLE001",  # Do not catch blind exception: `Exception`
    "B027",    # Checks for empty methods in abstract base classes without an abstract decorator.
    "UP007",   # Use `X | Y` for type annotations
    "UP036",   # Version block is outdated for minimum Python version
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "S701",    # Using jinja2 templates with `autoescape=False` is dangerous and can lead to XSS. Ensure `autoescape=True` or use the `select_autoescape` function.
    "N818",    # Exception name `RootException` should be named with an Error suffix
    "TRY301",  # Abstract `raise` to an inner function
    "PERF401", # Use a list comprehension to create a transformed list
    "PLW2901", # `for` loop variable `line` overwritten by assignment target
    "TRY300",  # Consider moving this statement to an `else` block
    "UP035",   # `typing.List` is deprecated, use `list` instead
    "RET503",  # Missing explicit `return` at the end of function able to return non-`None` value
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "INP001", # Allow test files to not have __init__.py in their directories (avoids namespace collisions)
]

[tool.uv]
required-version = ">=0.7.2"

[tool.hatch.build.targets.wheel]
packages = ["pipelex"]

[tool.hatch.build.targets.wheel.force-include]
"pyproject.toml" = "pipelex/pyproject.toml"

[tool.hatch.build.targets.sdist]
packages = ["pipelex"]

[tool.hatch.build.targets.sdist.force-include]
"pyproject.toml" = "pipelex/pyproject.toml"

[tool.hatch.metadata]
allow-direct-references = true

[tool.pylint.main]
py-version = "3.11"
reports = false

[tool.pylint.messages_control]
disable = ["all"]
enable = [
    "W0101", # Unreachable code: Used when there is some code behind a "return" or "raise" statement, which will never be accessed.
]
ignore = [".venv", "__pycache__", "build", "dist", ".git"]
